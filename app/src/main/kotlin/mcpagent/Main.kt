/*
 * This source file was generated by the Gradle 'init' task
 */
package mcpagent

import kotlinx.coroutines.runBlocking
import java.io.BufferedReader
import java.io.InputStreamReader

fun main() = runBlocking {
    val apiKey = System.getenv("GROQ_API_KEY") ?: run {
        println("GROQ_API_KEY environment variable is not set")
        return@runBlocking
    }

    val groqProvider = GroqProvider(apiKey, System.getenv("GROQ_API_ENDPOINT") ?: "")
    val agent = MCPAgent(groqProvider)
    val reader = BufferedReader(InputStreamReader(System.`in`))

    // Create MCP client
    val mcpClient = MCPClient()
    mcpClient.connect()

    // Get available tools
    val mcpTools = mcpClient.getAvailableTools()
    val tools = mcpTools.associate { tool ->
        val toolMap = tool as? Map<String, Any> ?: emptyMap()
        val name = toolMap["name"] as? String ?: ""
        name to ToolInfo(
            name = name,
            callable = { args ->
                mcpClient.createToolCaller(name)(args as Map<String, Any?>)
            },
            schema = mapOf(
                "type" to "function",
                "function" to mapOf(
                    "name" to name,
                    "description" to toolMap["description"]!!,
                    "parameters" to toolMap["inputSchema"]!!
                )
            )
        )
    }

    var messages: MutableList<Map<String, Any>>? = null
    while (true) {
        try {
            print("\nEnter your prompt (or 'quit' to exit): ")
            val userInput = reader.readLine() ?: continue
            if (userInput.lowercase() in listOf("quit", "exit", "q")) break

            val (response, newMessages) = agent.agentLoop(userInput, tools, messages ?: mutableListOf())
            println("\nResponse: $response")
            messages = newMessages.toMutableList()
        } catch (e: Exception) {
            println("\nError occurred: ${e.message}")
        }
    }
}